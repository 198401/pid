<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [F:\object\PID\keil\PID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image F:\object\PID\keil\PID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri Apr 06 10:56:29 2012
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pid &rArr; cmdHandle &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c]">Reset_Handler</a>
 <LI><a href="#[177]">os_sys_manager_ret</a>
 <LI><a href="#[124]">os_switch_tasks_ret</a>
 <LI><a href="#[e9]">__user_initial_stackheap</a>
 <LI><a href="#[d]">Undef_Handler</a>
 <LI><a href="#[f]">PAbt_Handler</a>
 <LI><a href="#[10]">DAbt_Handler</a>
 <LI><a href="#[12]">FIQ_Handler</a>
 <LI><a href="#[1d]">Switch_task</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c7]">modbus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">modbus</a><BR>
 <LI><a href="#[cc]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cc]">os_idle_demon</a><BR>
 <LI><a href="#[162]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[162]">os_error</a><BR>
 <LI><a href="#[d]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Undef_Handler</a><BR>
 <LI><a href="#[f]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PAbt_Handler</a><BR>
 <LI><a href="#[10]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DAbt_Handler</a><BR>
 <LI><a href="#[12]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ActDoub_OpeningHandler</a> from hmi.o(i.ActDoub_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[3e]">ActSngl_OpeningHandler</a> from hmi.o(i.ActSngl_OpeningHandler) referenced 2 times from hmi.o(i.HMI_Init)
 <LI><a href="#[39]">AddFun_DisplayHandler</a> from hmi.o(i.AddFun_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[38]">AddFun_KeyboardHandler</a> from hmi.o(i.AddFun_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[3a]">AddFun_OpeningHandler</a> from hmi.o(i.AddFun_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[86]">AnlCmd_OpeningHandler</a> from hmi.o(i.AnlCmd_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[88]">AnlP1_OpeningHandler</a> from hmi.o(i.AnlP1_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[89]">AnlP2_OpeningHandler</a> from hmi.o(i.AnlP2_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[85]">AnlPos_OpeningHandler</a> from hmi.o(i.AnlPos_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8c]">AnlSet0_OpeningHandler</a> from hmi.o(i.AnlSet0_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8d]">AnlSet10_OpeningHandler</a> from hmi.o(i.AnlSet10_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8b]">AnlSet4_OpeningHandler</a> from hmi.o(i.AnlSet4_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8e]">AnlSet5_OpeningHandler</a> from hmi.o(i.AnlSet5_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[87]">AnlSp_OpeningHandler</a> from hmi.o(i.AnlSp_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8a]">AnlT_OpeningHandler</a> from hmi.o(i.AnlT_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[97]">Bin1Cls_OpeningHandler</a> from hmi.o(i.Bin1Cls_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[8f]">Bin1Drv_OpeningHandler</a> from hmi.o(i.Bin1Drv_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[93]">Bin1Err1_OpeningHandler</a> from hmi.o(i.Bin1Err1_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[94]">Bin1Err2_OpeningHandler</a> from hmi.o(i.Bin1Err2_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[92]">Bin1ErrS_OpeningHandler</a> from hmi.o(i.Bin1ErrS_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[95]">Bin1ErrT_OpeningHandler</a> from hmi.o(i.Bin1ErrT_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[90]">Bin1Lim_OpeningHandler</a> from hmi.o(i.Bin1Lim_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[96]">Bin1Opn_OpeningHandler</a> from hmi.o(i.Bin1Opn_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[91]">Bin1Spos_OpeningHandler</a> from hmi.o(i.Bin1Spos_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a0]">Bin2Cls_OpeningHandler</a> from hmi.o(i.Bin2Cls_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[98]">Bin2Drv_OpeningHandler</a> from hmi.o(i.Bin2Drv_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9c]">Bin2Err1_OpeningHandler</a> from hmi.o(i.Bin2Err1_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9d]">Bin2Err2_OpeningHandler</a> from hmi.o(i.Bin2Err2_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9b]">Bin2ErrS_OpeningHandler</a> from hmi.o(i.Bin2ErrS_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9e]">Bin2ErrT_OpeningHandler</a> from hmi.o(i.Bin2ErrT_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[99]">Bin2Lim_OpeningHandler</a> from hmi.o(i.Bin2Lim_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9f]">Bin2Opn_OpeningHandler</a> from hmi.o(i.Bin2Opn_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[9a]">Bin2Spos_OpeningHandler</a> from hmi.o(i.Bin2Spos_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[77]">CaluserFact_OpeningHandler</a> from hmi.o(i.CaluserFact_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[75]">CaluserInp_DisplayHandler</a> from hmi.o(i.CaluserInp_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[74]">CaluserInp_KeyboardHandler</a> from hmi.o(i.CaluserInp_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[76]">CaluserInp_OpeningHandler</a> from hmi.o(i.CaluserInp_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5a]">CaluserPos_DisplayHandler</a> from hmi.o(i.CaluserPos_DisplayHandler) referenced 2 times from hmi.o(i.HMI_Init)
 <LI><a href="#[59]">CaluserPos_KeyboardHandler</a> from hmi.o(i.CaluserPos_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5b]">CaluserPos_OpeningHandler</a> from hmi.o(i.CaluserPos_OpeningHandler) referenced 2 times from hmi.o(i.HMI_Init)
 <LI><a href="#[44]">Charact11_OpeningHandler</a> from hmi.o(i.Charact11_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[45]">Charact125_OpeningHandler</a> from hmi.o(i.Charact125_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[46]">Charact133_OpeningHandler</a> from hmi.o(i.Charact133_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[47]">Charact150_OpeningHandler</a> from hmi.o(i.Charact150_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[48]">Charact251_OpeningHandler</a> from hmi.o(i.Charact251_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[49]">Charact331_OpeningHandler</a> from hmi.o(i.Charact331_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4a]">Charact501_OpeningHandler</a> from hmi.o(i.Charact501_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4c]">CharactFree_DisplayHandler</a> from hmi.o(i.CharactFree_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4b]">CharactFree_KeyboardHandler</a> from hmi.o(i.CharactFree_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4d]">CharactFree_OpeningHandler</a> from hmi.o(i.CharactFree_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[72]">CodeGlob_DisplayHandler</a> from hmi.o(i.CodeGlob_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[71]">CodeGlob_KeyboardHandler</a> from hmi.o(i.CodeGlob_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[73]">CodeGlob_OpeningHandler</a> from hmi.o(i.CodeGlob_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6c]">CodeKey_DisplayHandler</a> from hmi.o(i.CodeKey_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6b]">CodeKey_KeyboardHandler</a> from hmi.o(i.CodeKey_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6d]">CodeKey_OpeningHandler</a> from hmi.o(i.CodeKey_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6f]">CodeMenu_DisplayHandler</a> from hmi.o(i.CodeMenu_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6e]">CodeMenu_KeyboardHandler</a> from hmi.o(i.CodeMenu_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[70]">CodeMenu_OpeningHandler</a> from hmi.o(i.CodeMenu_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[10]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">DiractFall_OpeningHandler</a> from hmi.o(i.DiractFall_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[50]">DiractRise_OpeningHandler</a> from hmi.o(i.DiractRise_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4f]">DircmdFall_OpeningHandler</a> from hmi.o(i.DircmdFall_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[4e]">DircmdRise_OpeningHandler</a> from hmi.o(i.DircmdRise_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[12]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">IRQ_Handler</a> from rtx_config.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[41]">Input0_OpeningHandler</a> from hmi.o(i.Input0_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[42]">Input10_OpeningHandler</a> from hmi.o(i.Input10_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[40]">Input4_OpeningHandler</a> from hmi.o(i.Input4_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[43]">Input5_OpeningHandler</a> from hmi.o(i.Input5_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[29]">InsetCutoff_DisplayHandler</a> from hmi.o(i.InsetCutoff_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[28]">InsetCutoff_KeyboardHandler</a> from hmi.o(i.InsetCutoff_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2a]">InsetCutoff_OpeningHandler</a> from hmi.o(i.InsetCutoff_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2c]">InsetSpltrng_DisplayHandler</a> from hmi.o(i.InsetSpltrng_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2b]">InsetSpltrng_KeyboardHandler</a> from hmi.o(i.InsetSpltrng_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2d]">InsetSpltrng_OpeningHandler</a> from hmi.o(i.InsetSpltrng_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b7]">LeakChar_OpeningHandler</a> from hmi.o(i.LeakChar_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b5]">LeakMeas_DisplayHandler</a> from hmi.o(i.LeakMeas_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b4]">LeakMeas_KeyboardHandler</a> from hmi.o(i.LeakMeas_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b6]">LeakMeas_OpeningHandler</a> from hmi.o(i.LeakMeas_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b3]">LeakNot_OpeningHandler</a> from hmi.o(i.LeakNot_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[3c]">MENU_MAIN_MANUAL_DisplayHandler</a> from hmi.o(i.MENU_MAIN_MANUAL_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[3b]">MENU_MAIN_MANUAL_KeyboardHandler</a> from hmi.o(i.MENU_MAIN_MANUAL_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[3d]">MENU_MAIN_MANUAL_OpeningHandler</a> from hmi.o(i.MENU_MAIN_MANUAL_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[27]">MainMenu_DisplayHandler</a> from hmi.o(i.MainMenu_DisplayHandler) referenced 4 times from hmi.o(i.HMI_Init)
 <LI><a href="#[26]">MainMenu_KeyboardHandler</a> from hmi.o(i.MainMenu_KeyboardHandler) referenced 4 times from hmi.o(i.HMI_Init)
 <LI><a href="#[f]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">PcontrlDbnd_DisplayHandler</a> from hmi.o(i.PcontrlDbnd_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[78]">PcontrlDbnd_KeyboardHandler</a> from hmi.o(i.PcontrlDbnd_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7a]">PcontrlDbnd_OpeningHandler</a> from hmi.o(i.PcontrlDbnd_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7f]">PcontrlFilt_DisplayHandler</a> from hmi.o(i.PcontrlFilt_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7e]">PcontrlFilt_KeyboardHandler</a> from hmi.o(i.PcontrlFilt_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[80]">PcontrlFilt_OpeningHandler</a> from hmi.o(i.PcontrlFilt_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[82]">PcontrlKv_DisplayHandler</a> from hmi.o(i.PcontrlKv_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[81]">PcontrlKv_KeyboardHandler</a> from hmi.o(i.PcontrlKv_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[83]">PcontrlKv_OpeningHandler</a> from hmi.o(i.PcontrlKv_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7c]">PcontrlPara_DisplayHandler</a> from hmi.o(i.PcontrlPara_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7b]">PcontrlPara_KeyboardHandler</a> from hmi.o(i.PcontrlPara_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[7d]">PcontrlPara_OpeningHandler</a> from hmi.o(i.PcontrlPara_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[84]">PortD_OpeningHandler</a> from hmi.o(i.PortD_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[c]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">SWI_Handler</a> from hal_arm.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[a5]">ScalF_DisplayHandler</a> from hmi.o(i.ScalF_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a4]">ScalF_KeyboardHandler</a> from hmi.o(i.ScalF_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a6]">ScalF_OpeningHandler</a> from hmi.o(i.ScalF_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[ab]">ScalP_DisplayHandler</a> from hmi.o(i.ScalP_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[aa]">ScalP_KeyboardHandler</a> from hmi.o(i.ScalP_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[ac]">ScalP_OpeningHandler</a> from hmi.o(i.ScalP_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a2]">ScalS_DisplayHandler</a> from hmi.o(i.ScalS_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a1]">ScalS_KeyboardHandler</a> from hmi.o(i.ScalS_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a3]">ScalS_OpeningHandler</a> from hmi.o(i.ScalS_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a8]">ScalT_DisplayHandler</a> from hmi.o(i.ScalT_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a7]">ScalT_KeyboardHandler</a> from hmi.o(i.ScalT_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[a9]">ScalT_OpeningHandler</a> from hmi.o(i.ScalT_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[68]">Serio1200_OpeningHandler</a> from hmi.o(i.Serio1200_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[66]">Serio19200_OpeningHandler</a> from hmi.o(i.Serio19200_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[69]">Serio2400_OpeningHandler</a> from hmi.o(i.Serio2400_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[67]">Serio38400_OpeningHandler</a> from hmi.o(i.Serio38400_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[6a]">Serio4800_OpeningHandler</a> from hmi.o(i.Serio4800_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[65]">Serio9600_OpeningHandler</a> from hmi.o(i.Serio9600_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[62]">SigerrFunon_OpeningHandler</a> from hmi.o(i.SigerrFunon_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[64]">SigerrOff_OpeningHandler</a> from hmi.o(i.SigerrOff_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[63]">SigerrPoson_OpeningHandler</a> from hmi.o(i.SigerrPoson_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[1d]">Switch_task</a> from hal_arm.o(.emb_text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[35]">SystemSafepos_DisplayHandler</a> from hmi.o(i.SystemSafepos_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[34]">SystemSafepos_KeyboardHandler</a> from hmi.o(i.SystemSafepos_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[36]">SystemSafepos_OpeningHandler</a> from hmi.o(i.SystemSafepos_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[37]">SystemSetfact_OpeningHandler</a> from hmi.o(i.SystemSetfact_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[ae]">TuneDef_OpeningHandler</a> from hmi.o(i.TuneDef_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[af]">TuneFlow_OpeningHandler</a> from hmi.o(i.TuneFlow_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b2]">TuneLevl_OpeningHandler</a> from hmi.o(i.TuneLevl_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[ad]">TuneNot_OpeningHandler</a> from hmi.o(i.TuneNot_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b1]">TunePres_OpeningHandler</a> from hmi.o(i.TunePres_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[b0]">TuneTemp_OpeningHandler</a> from hmi.o(i.TuneTemp_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[d]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">XcontrolDbnd_DisplayHandler</a> from hmi.o(i.XcontrolDbnd_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[52]">XcontrolDbnd_KeyboardHandler</a> from hmi.o(i.XcontrolDbnd_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[54]">XcontrolDbnd_OpeningHandler</a> from hmi.o(i.XcontrolDbnd_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[56]">XcontrolPara_DisplayHandler</a> from hmi.o(i.XcontrolPara_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[55]">XcontrolPara_KeyboardHandler</a> from hmi.o(i.XcontrolPara_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[57]">XcontrolPara_OpeningHandler</a> from hmi.o(i.XcontrolPara_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2f]">XsetXlimit_DisplayHandler</a> from hmi.o(i.XsetXlimit_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[2e]">XsetXlimit_KeyboardHandler</a> from hmi.o(i.XsetXlimit_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[30]">XsetXlimit_OpeningHandler</a> from hmi.o(i.XsetXlimit_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[32]">XsetXtime_DisplayHandler</a> from hmi.o(i.XsetXtime_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[31]">XsetXtime_KeyboardHandler</a> from hmi.o(i.XsetXtime_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[33]">XsetXtime_OpeningHandler</a> from hmi.o(i.XsetXtime_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[60]">XtuneAir_DisplayHandler</a> from hmi.o(i.XtuneAir_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5f]">XtuneAir_KeyboardHandler</a> from hmi.o(i.XtuneAir_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[61]">XtuneAir_OpeningHandler</a> from hmi.o(i.XtuneAir_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[58]">XtuneAuto_OpeningHandler</a> from hmi.o(i.XtuneAuto_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5d]">XtunePwm_DisplayHandler</a> from hmi.o(i.XtunePwm_DisplayHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5c]">XtunePwm_KeyboardHandler</a> from hmi.o(i.XtunePwm_KeyboardHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[5e]">XtunePwm_OpeningHandler</a> from hmi.o(i.XtunePwm_OpeningHandler) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[1e]">__SWI_0</a> from hal_arm.o(i.__SWI_0) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[1f]">__SWI_1</a> from rt_membox.o(i.__SWI_1) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[20]">__SWI_2</a> from rt_membox.o(i.__SWI_2) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[21]">__SWI_3</a> from hal_arm.o(i.__SWI_3) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[22]">__SWI_4</a> from hal_arm.o(i.__SWI_4) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[23]">__SWI_5</a> from rtx_config.o(i.__SWI_5) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[24]">__SWI_6</a> from hal_arm.o(i.__SWI_6) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[25]">__SWI_7</a> from hal_arm.o(i.__SWI_7) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[ce]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[c9]">adc</a> from main.o(i.adc) referenced from main.o(i.init)
 <LI><a href="#[c6]">dac</a> from main.o(i.dac) referenced from main.o(i.init)
 <LI><a href="#[c2]">eMBASCIIReceive</a> from mbascii.o(i.eMBASCIIReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[c1]">eMBASCIISend</a> from mbascii.o(i.eMBASCIISend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[bf]">eMBASCIIStart</a> from mbascii.o(i.eMBASCIIStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[c0]">eMBASCIIStop</a> from mbascii.o(i.eMBASCIIStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[8]">eMBFuncReadCoils</a> from mbfunccoils.o(i.eMBFuncReadCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[b]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(i.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data)
 <LI><a href="#[4]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[3]">eMBFuncReadInputRegister</a> from mbfuncinput.o(i.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[7]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[9]">eMBFuncWriteCoil</a> from mbfunccoils.o(i.eMBFuncWriteCoil) referenced 2 times from mb.o(.data)
 <LI><a href="#[6]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[a]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(i.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[5]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[bb]">eMBRTUReceive</a> from mbrtu.o(i.eMBRTUReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[ba]">eMBRTUSend</a> from mbrtu.o(i.eMBRTUSend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[b8]">eMBRTUStart</a> from mbrtu.o(i.eMBRTUStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[b9]">eMBRTUStop</a> from mbrtu.o(i.eMBRTUStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[ca]">hmi</a> from main.o(i.hmi) referenced from main.o(i.init)
 <LI><a href="#[cb]">init</a> from main.o(i.init) referenced from main.o(i.main)
 <LI><a href="#[14]">main</a> from main.o(i.main) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[15]">mb_timer2_interrupt</a> from porttimer.o(i.mb_timer2_interrupt) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[16]">mb_uart_interrupt</a> from portserial.o(i.mb_uart_interrupt) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[c7]">modbus</a> from main.o(i.modbus) referenced from main.o(i.init)
 <LI><a href="#[17]">os_clock_interrupt</a> from hal_arm.o(.emb_text) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[18]">os_def_interrupt</a> from rtx_config.o(i.os_def_interrupt) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[cc]">os_idle_demon</a> from rtx_config.o(i.os_idle_demon) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[1a]">os_irq_ack_lock</a> from rtx_config.o(i.os_irq_ack_lock) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[19]">os_sys_init1</a> from rt_task.o(i.os_sys_init1) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[1b]">os_sys_manager</a> from rt_system.o(i.os_sys_manager) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[cd]">os_tsk_create0</a> from rt_task.o(i.os_tsk_create0) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[c8]">pid</a> from main.o(i.pid) referenced from main.o(i.init)
 <LI><a href="#[1c]">tsk_unlock</a> from rtx_config.o(i.tsk_unlock) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[c3]">xMBASCIIReceiveFSM</a> from mbascii.o(i.xMBASCIIReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[c5]">xMBASCIITimerT1SExpired</a> from mbascii.o(i.xMBASCIITimerT1SExpired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[c4]">xMBASCIITransmitFSM</a> from mbascii.o(i.xMBASCIITransmitFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[bc]">xMBRTUReceiveFSM</a> from mbrtu.o(i.xMBRTUReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[be]">xMBRTUTimerT35Expired</a> from mbrtu.o(i.xMBRTUTimerT35Expired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[bd]">xMBRTUTransmitFSM</a> from mbrtu.o(i.xMBRTUTransmitFSM) referenced from mb.o(i.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d1]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a5]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a6]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1a7]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1a8]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d6]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d9]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[dd]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[11]"></a>IRQ_Handler</STRONG> (ARM, 52 bytes, Stack size 0 bytes, rtx_config.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>_inc_qi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_arm.o(.emb_text), UNUSED)

<P><STRONG><a name="[175]"></a>_dec_qc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[16e]"></a>os_set_env</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[159]"></a>os_sys_init0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>os_sys_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[17]"></a>os_clock_interrupt</STRONG> (ARM, 128 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[177]"></a>os_sys_manager_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[e]"></a>SWI_Handler</STRONG> (ARM, 192 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>os_switch_tasks_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>

<P><STRONG><a name="[e9]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c7]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[df]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBBIN2CHAR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITimerT1SExpired
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIIReceiveFSM
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIReceive
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_KeyboardHandler (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_DisplayHandler (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_update (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_DisplayHandler (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_DisplayHandler (via Veneer)
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posHandle (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset_integrator (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2Handle (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1Handle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_KeyboardHandler (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio9600_OpeningHandler (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio4800_OpeningHandler (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio38400_OpeningHandler (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio2400_OpeningHandler (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio19200_OpeningHandler (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio1200_OpeningHandler (via Veneer)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_KeyboardHandler (via Veneer)
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posHandle (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2Handle (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1Handle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
</UL>

<P><STRONG><a name="[1cb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e1]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>__rt_SIGABRT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1ce]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_errno_addr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[1d1]"></a>__errno$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__rt_errno_addr$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[e4]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d7]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[da]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e7]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[ec]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[ed]"></a>__rt_fp_status_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_fp_status_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtunePwm_KeyboardHandler (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXlimit_KeyboardHandler (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolPara_KeyboardHandler (via Veneer)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_KeyboardHandler (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetSpltrng_KeyboardHandler (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetCutoff_KeyboardHandler (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_KeyboardHandler (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_DisplayHandler (via Veneer)
</UL>

<P><STRONG><a name="[105]"></a>DS18B20_Temperature</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi
</UL>

<P><STRONG><a name="[117]"></a>EepromWr_n</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iap.o(i.EepromWr_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EepromWr_n
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyboardHandler
</UL>

<P><STRONG><a name="[10e]"></a>HMI_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hmi.o(i.HMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = HMI_Handler &rArr; Display &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi
</UL>

<P><STRONG><a name="[10f]"></a>HMI_Init</STRONG> (Thumb, 4546 bytes, Stack size 32 bytes, hmi.o(i.HMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HMI_Init &rArr; initLCD_1622 &rArr; SENDCOMA &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD_1622
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_update
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[11a]"></a>SetPwmDutyCycle1</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(i.SetPwmDutyCycle1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetPwmDutyCycle1 &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[fd]"></a>SetPwmDutyCycle2</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, main.o(i.SetPwmDutyCycle2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetPwmDutyCycle2 &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_KeyboardHandler
</UL>

<P><STRONG><a name="[136]"></a>WriteToAD5422</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ad5422.o(i.WriteToAD5422))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteToAD5422
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
</UL>

<P><STRONG><a name="[10d]"></a>__ARM_common_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb.o(i.__ARM_common_call_via_r0))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyboardHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[14c]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[139]"></a>__ARM_common_disable_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb.o(i.__ARM_common_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStop (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStart (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIISend (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIReceive (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIInit (via Veneer)
</UL>

<P><STRONG><a name="[13c]"></a>__ARM_common_enable_irq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb.o(i.__ARM_common_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStop (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStart (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIISend (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIReceive (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIInit (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>__ARM_common_switch8</STRONG> (ARM, 24 bytes, Stack size 0 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital (via Veneer)
</UL>

<P><STRONG><a name="[1e]"></a>__SWI_0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_0))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_tasks_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[1f]"></a>__SWI_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_1))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[20]"></a>__SWI_2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_2))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[21]"></a>__SWI_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_3))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[22]"></a>__SWI_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_4))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[23]"></a>__SWI_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(i.__SWI_5))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[24]"></a>__SWI_6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_6))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[25]"></a>__SWI_7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_7))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[125]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[e6]"></a>__user_perthread_libspace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_config.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[16d]"></a>_init_box</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[cf]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_config.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _mutex_acquire &rArr; os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[d0]"></a>_mutex_release</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_config.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
</UL>

<P><STRONG><a name="[c9]"></a>adc</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc &rArr; adc_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init)
</UL>
<P><STRONG><a name="[12c]"></a>adc_init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_poweron
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[12d]"></a>adc_poweron</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.adc_poweron))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[12a]"></a>adc_read_data</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, main.o(i.adc_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[ff]"></a>clearLCD</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht1622.o(i.clearLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clearLCD &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HT1622
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMB
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetfact_OpeningHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_OpeningHandler
</UL>

<P><STRONG><a name="[12e]"></a>cmdHandle</STRONG> (Thumb, 1198 bytes, Stack size 88 bytes, calc.o(i.cmdHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cmdHandle &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[c6]"></a>dac</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dac &rArr; os_dly_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToAD5422
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init)
</UL>
<P><STRONG><a name="[11f]"></a>data_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, main.o(i.data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetfact_OpeningHandler
</UL>

<P><STRONG><a name="[137]"></a>digital</STRONG> (Thumb, 692 bytes, Stack size 24 bytes, ht1622.o(i.digital))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWRITE_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
</UL>

<P><STRONG><a name="[f6]"></a>display_char</STRONG> (Thumb, 1498 bytes, Stack size 24 bytes, ht1622.o(i.display_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = display_char &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWRITE_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_DisplayHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtunePwm_DisplayHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAir_DisplayHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXtime_DisplayHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXlimit_DisplayHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolPara_DisplayHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolDbnd_DisplayHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetfact_OpeningHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSafepos_DisplayHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalT_DisplayHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalS_DisplayHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalP_DisplayHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalF_DisplayHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlPara_DisplayHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlKv_DisplayHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlFilt_DisplayHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlDbnd_DisplayHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyboardHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu_DisplayHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_DisplayHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakMeas_DisplayHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetSpltrng_DisplayHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetCutoff_DisplayHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeMenu_DisplayHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeKey_DisplayHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeGlob_DisplayHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_DisplayHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_DisplayHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_DisplayHandler
</UL>

<P><STRONG><a name="[f5]"></a>display_digital</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ht1622.o(i.display_digital))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWRITE_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_DisplayHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtunePwm_DisplayHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAir_DisplayHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXtime_DisplayHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXlimit_DisplayHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolPara_DisplayHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolDbnd_DisplayHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSafepos_DisplayHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalT_DisplayHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalS_DisplayHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalP_DisplayHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalF_DisplayHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlPara_DisplayHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlKv_DisplayHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlFilt_DisplayHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlDbnd_DisplayHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu_DisplayHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_DisplayHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakMeas_DisplayHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetSpltrng_DisplayHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetCutoff_DisplayHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeMenu_DisplayHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeKey_DisplayHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeGlob_DisplayHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_DisplayHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_DisplayHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_DisplayHandler
</UL>

<P><STRONG><a name="[138]"></a>eMBASCIIInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mbascii.o(i.eMBASCIIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = eMBASCIIInit &rArr; xMBPortSerialInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[c2]"></a>eMBASCIIReceive</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mbascii.o(i.eMBASCIIReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = eMBASCIIReceive &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBLRC
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[c1]"></a>eMBASCIISend</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mbascii.o(i.eMBASCIISend))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = eMBASCIISend &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBLRC
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[bf]"></a>eMBASCIIStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mbascii.o(i.eMBASCIIStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBASCIIStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[c0]"></a>eMBASCIIStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbascii.o(i.eMBASCIIStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBASCIIStop &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[141]"></a>eMBEnable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[8]"></a>eMBFuncReadCoils</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReadCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReadDiscreteInputs
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB &rArr; EepromWr_n
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; EepromWr_n
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncWriteCoil
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB &rArr; EepromWr_n
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBFuncWriteMultipleCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; EepromWr_n
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[147]"></a>eMBInit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[14a]"></a>eMBPoll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus
</UL>

<P><STRONG><a name="[148]"></a>eMBRTUInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[bb]"></a>eMBRTUReceive</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = eMBRTUReceive &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[ba]"></a>eMBRTUSend</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[b8]"></a>eMBRTUStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[b9]"></a>eMBRTUStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[142]"></a>eMBRegCoilsCB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.eMBRegCoilsCB))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[144]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.eMBRegDiscreteCB))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[145]"></a>eMBRegHoldingCB</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, main.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRegHoldingCB &rArr; EepromWr_n
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWr_n
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[146]"></a>eMBRegInputCB</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, main.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[fb]"></a>floattochar</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, ht1622.o(i.floattochar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_DisplayHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_DisplayHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_DisplayHandler
</UL>

<P><STRONG><a name="[ca]"></a>hmi</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, main.o(i.hmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = hmi &rArr; HMI_Handler &rArr; Display &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpReset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init)
</UL>
<P><STRONG><a name="[153]"></a>iap_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iap.o(i.iap_init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[cb]"></a>init</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, main.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = init &rArr; adc_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToAD5422
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_data
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[110]"></a>initLCD_1622</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht1622.o(i.initLCD_1622))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initLCD_1622 &rArr; SENDCOMA &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMA
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
</UL>

<P><STRONG><a name="[132]"></a>log</STRONG> (ARM, 1392 bytes, Stack size 104 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>lpReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.lpReset))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi
</UL>

<P><STRONG><a name="[14]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[15]"></a>mb_timer2_interrupt</STRONG> (ARM, 40 bytes, Stack size 24 bytes, porttimer.o(i.mb_timer2_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_timer2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[16]"></a>mb_uart_interrupt</STRONG> (ARM, 72 bytes, Stack size 32 bytes, portserial.o(i.mb_uart_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_uart_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[c7]"></a>modbus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = modbus &rArr;  modbus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init)
</UL>
<P><STRONG><a name="[15a]"></a>os_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_task.o(i.os_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_dly
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[15d]"></a>os_chk_robin</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_robin.o(i.os_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_chk_robin &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[15f]"></a>os_dec_dly</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rt_list.o(i.os_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dec_dly &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[18]"></a>os_def_interrupt</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rtx_config.o(i.os_def_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[160]"></a>os_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.os_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
</UL>

<P><STRONG><a name="[120]"></a>os_dly_wait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_time.o(i.os_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_dly_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
</UL>

<P><STRONG><a name="[162]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_error))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
</UL>

<P><STRONG><a name="[163]"></a>os_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.os_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_evt_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[12b]"></a>os_evt_set</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rt_event.o(i.os_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_evt_set &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[165]"></a>os_evt_wait</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rt_event.o(i.os_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_evt_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[15c]"></a>os_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.os_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[cc]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_idle_demon))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[170]"></a>os_init_robin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_robin.o(i.os_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[167]"></a>os_init_stack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_arm.o(i.os_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>

<P><STRONG><a name="[1a]"></a>os_irq_ack_lock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_config.o(i.os_irq_ack_lock))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[150]"></a>os_itv_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_time.o(i.os_itv_set))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi
</UL>

<P><STRONG><a name="[152]"></a>os_itv_wait</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_time.o(i.os_itv_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_itv_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi
</UL>

<P><STRONG><a name="[168]"></a>os_mbx_psh</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[129]"></a>os_mut_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rt_mutex.o(i.os_mut_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[128]"></a>os_mut_wait</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_wait), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[15b]"></a>os_put_dly</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, rt_list.o(i.os_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[15e]"></a>os_put_prio</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_list.o(i.os_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[161]"></a>os_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.os_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[169]"></a>os_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_list.o(i.os_resort_prio), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_resort_prio &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[164]"></a>os_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rt_list.o(i.os_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
</UL>

<P><STRONG><a name="[16a]"></a>os_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.os_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
</UL>

<P><STRONG><a name="[16b]"></a>os_sem_psh</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_semaphore.o(i.os_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sem_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[122]"></a>os_stk_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_stk_check))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[19]"></a>os_sys_init1</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rt_task.o(i.os_sys_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_sys_init1 &rArr; os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init (Weak Reference)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_robin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[1b]"></a>os_sys_manager</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, rt_system.o(i.os_sys_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = os_sys_manager &rArr; os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_ovf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_cnt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_reload (Weak Reference)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager_ret
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dec_qc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[178]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_tmr_call))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
</UL>

<P><STRONG><a name="[16f]"></a>os_tmr_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_config.o(i.os_tmr_init))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[172]"></a>os_tmr_inspect_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(i.os_tmr_inspect_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[173]"></a>os_tmr_inspect_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(i.os_tmr_inspect_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[176]"></a>os_tmr_tick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[cd]"></a>os_tsk_create0</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rt_task.o(i.os_tsk_create0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[155]"></a>os_tsk_delete</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rt_task.o(i.os_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_tsk_delete &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[127]"></a>os_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.os_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[17a]"></a>p1Handle</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, calc.o(i.p1Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = p1Handle &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[17b]"></a>p2Handle</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, calc.o(i.p2Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = p2Handle &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[c8]"></a>pid</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, main.o(i.pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pid &rArr; cmdHandle &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posHandle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset_integrator
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2Handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1Handle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init)
</UL>
<P><STRONG><a name="[154]"></a>pid_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pid.o(i.pid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pid_init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[17f]"></a>pid_reset_integrator</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pid.o(i.pid_reset_integrator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pid_reset_integrator
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[17c]"></a>posHandle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, calc.o(i.posHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = posHandle &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[143]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[181]"></a>sqrt</STRONG> (ARM, 112 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>tempHandle</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, calc.o(i.tempHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tempHandle &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[1c]"></a>tsk_unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_config.o(i.tsk_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[14e]"></a>usMBCRC16</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[13e]"></a>vMBPortSerialEnable</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vMBPortSerialEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIISend
</UL>

<P><STRONG><a name="[140]"></a>vMBPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITimerT1SExpired
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIIReceiveFSM
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStop
</UL>

<P><STRONG><a name="[14f]"></a>vMBPortTimersEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIIReceiveFSM
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[c3]"></a>xMBASCIIReceiveFSM</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, mbascii.o(i.xMBASCIIReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = xMBASCIIReceiveFSM &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[c5]"></a>xMBASCIITimerT1SExpired</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mbascii.o(i.xMBASCIITimerT1SExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = xMBASCIITimerT1SExpired &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[c4]"></a>xMBASCIITransmitFSM</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, mbascii.o(i.xMBASCIITransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = xMBASCIITransmitFSM &rArr; prvucMBBIN2CHAR &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvucMBBIN2CHAR
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[14b]"></a>xMBPortEventGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[149]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[13f]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIIReceiveFSM
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIStart
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[183]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIIReceiveFSM
</UL>

<P><STRONG><a name="[13a]"></a>xMBPortSerialInit</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = xMBPortSerialInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIInit
</UL>

<P><STRONG><a name="[184]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM
</UL>

<P><STRONG><a name="[13b]"></a>xMBPortTimersInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIInit
</UL>

<P><STRONG><a name="[bc]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = xMBRTUReceiveFSM &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[be]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = xMBRTUTimerT35Expired &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[bd]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = xMBRTUTransmitFSM &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[10b]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[188]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[18b]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[18f]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[18d]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_cdcmpeq</STRONG> (ARM, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[18e]"></a>_dcmpeq</STRONG> (ARM, 148 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1d4]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[191]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[192]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[187]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[18a]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[193]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[182]"></a>_dsqrt</STRONG> (ARM, 516 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[195]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
</UL>

<P><STRONG><a name="[196]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
</UL>

<P><STRONG><a name="[198]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[19a]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_DisplayHandler (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_DisplayHandler (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid (via Veneer)
</UL>

<P><STRONG><a name="[19c]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posHandle (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2Handle (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1Handle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_KeyboardHandler (via Veneer)
</UL>

<P><STRONG><a name="[1d5]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[19f]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_DisplayHandler (via Veneer)
</UL>

<P><STRONG><a name="[19e]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[197]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[d5]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[186]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar (via Veneer)
</UL>

<P><STRONG><a name="[1a1]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempHandle (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandle (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler (via Veneer)
</UL>

<P><STRONG><a name="[1a3]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[18c]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[10a]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[11d]"></a>__ARM_scalbnf</STRONG> (ARM, 92 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2 (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle1 (via Veneer)
</UL>

<P><STRONG><a name="[1a4]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[1d7]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>prvucMBBIN2CHAR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mbascii.o(i.prvucMBBIN2CHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvucMBBIN2CHAR &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBASCIITransmitFSM
</UL>

<P><STRONG><a name="[13d]"></a>prvucMBLRC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbascii.o(i.prvucMBLRC))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIISend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBASCIIReceive
</UL>

<P><STRONG><a name="[111]"></a>LCDWRITE_1622</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht1622.o(i.LCDWRITE_1622))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HT1622
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMB
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital
</UL>

<P><STRONG><a name="[119]"></a>Reset_1622</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht1622.o(i.Reset_1622))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD_1622
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMA
</UL>

<P><STRONG><a name="[118]"></a>SENDCOMA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht1622.o(i.SENDCOMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SENDCOMA &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HT1622
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD_1622
</UL>

<P><STRONG><a name="[112]"></a>SENDCOMB</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht1622.o(i.SENDCOMB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HT1622
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_1622
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWRITE_1622
</UL>

<P><STRONG><a name="[113]"></a>SendBit_HT1622</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ht1622.o(i.SendBit_HT1622))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBit_HT1622
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENDCOMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWRITE_1622
</UL>

<P><STRONG><a name="[3f]"></a>ActDoub_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.ActDoub_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ActDoub_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[3e]"></a>ActSngl_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.ActSngl_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ActSngl_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[39]"></a>AddFun_DisplayHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hmi.o(i.AddFun_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AddFun_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[38]"></a>AddFun_KeyboardHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hmi.o(i.AddFun_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddFun_KeyboardHandler &rArr; menu_update
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_update
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[3a]"></a>AddFun_OpeningHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmi.o(i.AddFun_OpeningHandler))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[86]"></a>AnlCmd_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlCmd_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlCmd_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[88]"></a>AnlP1_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlP1_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlP1_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[89]"></a>AnlP2_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlP2_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlP2_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[85]"></a>AnlPos_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlPos_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlPos_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8c]"></a>AnlSet0_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlSet0_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlSet0_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8d]"></a>AnlSet10_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlSet10_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlSet10_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8b]"></a>AnlSet4_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlSet4_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlSet4_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8e]"></a>AnlSet5_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlSet5_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlSet5_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[87]"></a>AnlSp_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlSp_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlSp_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8a]"></a>AnlT_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.AnlT_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnlT_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[97]"></a>Bin1Cls_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Bin1Cls_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Cls_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[8f]"></a>Bin1Drv_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1Drv_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Drv_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[93]"></a>Bin1Err1_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1Err1_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Err1_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[94]"></a>Bin1Err2_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1Err2_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Err2_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[92]"></a>Bin1ErrS_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1ErrS_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1ErrS_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[95]"></a>Bin1ErrT_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1ErrT_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1ErrT_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[90]"></a>Bin1Lim_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1Lim_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Lim_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[96]"></a>Bin1Opn_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Bin1Opn_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Opn_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[91]"></a>Bin1Spos_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin1Spos_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin1Spos_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a0]"></a>Bin2Cls_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Bin2Cls_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Cls_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[98]"></a>Bin2Drv_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2Drv_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Drv_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9c]"></a>Bin2Err1_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2Err1_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Err1_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9d]"></a>Bin2Err2_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2Err2_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Err2_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9b]"></a>Bin2ErrS_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2ErrS_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2ErrS_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9e]"></a>Bin2ErrT_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2ErrT_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2ErrT_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[99]"></a>Bin2Lim_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2Lim_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Lim_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9f]"></a>Bin2Opn_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Bin2Opn_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Opn_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[9a]"></a>Bin2Spos_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Bin2Spos_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bin2Spos_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[77]"></a>CaluserFact_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.CaluserFact_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CaluserFact_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[75]"></a>CaluserInp_DisplayHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hmi.o(i.CaluserInp_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CaluserInp_DisplayHandler &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[74]"></a>CaluserInp_KeyboardHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, hmi.o(i.CaluserInp_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CaluserInp_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[76]"></a>CaluserInp_OpeningHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmi.o(i.CaluserInp_OpeningHandler))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5a]"></a>CaluserPos_DisplayHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hmi.o(i.CaluserPos_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CaluserPos_DisplayHandler &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[59]"></a>CaluserPos_KeyboardHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hmi.o(i.CaluserPos_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CaluserPos_KeyboardHandler &rArr; SetPwmDutyCycle2 &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5b]"></a>CaluserPos_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hmi.o(i.CaluserPos_OpeningHandler))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[44]"></a>Charact11_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Charact11_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact11_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[45]"></a>Charact125_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Charact125_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact125_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[46]"></a>Charact133_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Charact133_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact133_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[47]"></a>Charact150_OpeningHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi.o(i.Charact150_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact150_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[48]"></a>Charact251_OpeningHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmi.o(i.Charact251_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact251_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[49]"></a>Charact331_OpeningHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmi.o(i.Charact331_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact331_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4a]"></a>Charact501_OpeningHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmi.o(i.Charact501_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Charact501_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4c]"></a>CharactFree_DisplayHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hmi.o(i.CharactFree_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CharactFree_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4b]"></a>CharactFree_KeyboardHandler</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, hmi.o(i.CharactFree_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = CharactFree_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4d]"></a>CharactFree_OpeningHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hmi.o(i.CharactFree_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CharactFree_OpeningHandler &rArr; clearLCD &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[100]"></a>CheckKeyboard</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hmi.o(i.CheckKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CheckKeyboard &rArr; OnKeyDown
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyUp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyDown
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Handler
</UL>

<P><STRONG><a name="[72]"></a>CodeGlob_DisplayHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi.o(i.CodeGlob_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CodeGlob_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[71]"></a>CodeGlob_KeyboardHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hmi.o(i.CodeGlob_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CodeGlob_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[73]"></a>CodeGlob_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.CodeGlob_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CodeGlob_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6c]"></a>CodeKey_DisplayHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi.o(i.CodeKey_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CodeKey_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6b]"></a>CodeKey_KeyboardHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hmi.o(i.CodeKey_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CodeKey_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6d]"></a>CodeKey_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.CodeKey_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CodeKey_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6f]"></a>CodeMenu_DisplayHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi.o(i.CodeMenu_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CodeMenu_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6e]"></a>CodeMenu_KeyboardHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hmi.o(i.CodeMenu_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CodeMenu_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[70]"></a>CodeMenu_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.CodeMenu_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CodeMenu_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[51]"></a>DiractFall_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.DiractFall_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DiractFall_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[50]"></a>DiractRise_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.DiractRise_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DiractRise_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4f]"></a>DircmdFall_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.DircmdFall_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DircmdFall_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[4e]"></a>DircmdRise_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.DircmdRise_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DircmdRise_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[10c]"></a>Display</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, hmi.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Display &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Handler
</UL>

<P><STRONG><a name="[41]"></a>Input0_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.Input0_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Input0_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[42]"></a>Input10_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.Input10_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Input10_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[40]"></a>Input4_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.Input4_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Input4_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[43]"></a>Input5_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.Input5_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Input5_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[29]"></a>InsetCutoff_DisplayHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmi.o(i.InsetCutoff_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InsetCutoff_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[28]"></a>InsetCutoff_KeyboardHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hmi.o(i.InsetCutoff_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = InsetCutoff_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2a]"></a>InsetCutoff_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.InsetCutoff_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InsetCutoff_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2c]"></a>InsetSpltrng_DisplayHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmi.o(i.InsetSpltrng_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InsetSpltrng_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2b]"></a>InsetSpltrng_KeyboardHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hmi.o(i.InsetSpltrng_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = InsetSpltrng_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2d]"></a>InsetSpltrng_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.InsetSpltrng_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InsetSpltrng_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b7]"></a>LeakChar_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.LeakChar_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LeakChar_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b5]"></a>LeakMeas_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.LeakMeas_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LeakMeas_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b4]"></a>LeakMeas_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.LeakMeas_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LeakMeas_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b6]"></a>LeakMeas_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.LeakMeas_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LeakMeas_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b3]"></a>LeakNot_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.LeakNot_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LeakNot_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[3c]"></a>MENU_MAIN_MANUAL_DisplayHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hmi.o(i.MENU_MAIN_MANUAL_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MENU_MAIN_MANUAL_DisplayHandler &rArr; floattochar &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattochar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[3b]"></a>MENU_MAIN_MANUAL_KeyboardHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, hmi.o(i.MENU_MAIN_MANUAL_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MENU_MAIN_MANUAL_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[3d]"></a>MENU_MAIN_MANUAL_OpeningHandler</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, hmi.o(i.MENU_MAIN_MANUAL_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MENU_MAIN_MANUAL_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[27]"></a>MainMenu_DisplayHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi.o(i.MainMenu_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MainMenu_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[26]"></a>MainMenu_KeyboardHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.MainMenu_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MainMenu_KeyboardHandler &rArr; MenuKeyboardHandler &rArr; display_char &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyboardHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[115]"></a>MenuKeyboardHandler</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, hmi.o(i.MenuKeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MenuKeyboardHandler &rArr; display_char &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWr_n
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1s
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu_KeyboardHandler
</UL>

<P><STRONG><a name="[101]"></a>OnKeyDown</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, hmi.o(i.OnKeyDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OnKeyDown
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
</UL>

<P><STRONG><a name="[102]"></a>OnKeyUp</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, hmi.o(i.OnKeyUp))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
</UL>

<P><STRONG><a name="[79]"></a>PcontrlDbnd_DisplayHandler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hmi.o(i.PcontrlDbnd_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PcontrlDbnd_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[78]"></a>PcontrlDbnd_KeyboardHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hmi.o(i.PcontrlDbnd_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PcontrlDbnd_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7a]"></a>PcontrlDbnd_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.PcontrlDbnd_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PcontrlDbnd_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7f]"></a>PcontrlFilt_DisplayHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hmi.o(i.PcontrlFilt_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PcontrlFilt_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7e]"></a>PcontrlFilt_KeyboardHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hmi.o(i.PcontrlFilt_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PcontrlFilt_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[80]"></a>PcontrlFilt_OpeningHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmi.o(i.PcontrlFilt_OpeningHandler))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[82]"></a>PcontrlKv_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.PcontrlKv_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PcontrlKv_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[81]"></a>PcontrlKv_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.PcontrlKv_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PcontrlKv_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[83]"></a>PcontrlKv_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.PcontrlKv_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PcontrlKv_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7c]"></a>PcontrlPara_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.PcontrlPara_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PcontrlPara_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7b]"></a>PcontrlPara_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.PcontrlPara_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PcontrlPara_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[7d]"></a>PcontrlPara_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.PcontrlPara_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PcontrlPara_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[84]"></a>PortD_OpeningHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi.o(i.PortD_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PortD_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a5]"></a>ScalF_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.ScalF_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ScalF_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a4]"></a>ScalF_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.ScalF_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ScalF_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a6]"></a>ScalF_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.ScalF_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ScalF_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[ab]"></a>ScalP_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.ScalP_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ScalP_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[aa]"></a>ScalP_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.ScalP_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ScalP_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[ac]"></a>ScalP_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.ScalP_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ScalP_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a2]"></a>ScalS_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.ScalS_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ScalS_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a1]"></a>ScalS_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.ScalS_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ScalS_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a3]"></a>ScalS_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.ScalS_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ScalS_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a8]"></a>ScalT_DisplayHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hmi.o(i.ScalT_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ScalT_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a7]"></a>ScalT_KeyboardHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hmi.o(i.ScalT_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ScalT_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[a9]"></a>ScalT_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.ScalT_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ScalT_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[68]"></a>Serio1200_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio1200_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio1200_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[66]"></a>Serio19200_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio19200_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio19200_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[69]"></a>Serio2400_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio2400_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio2400_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[67]"></a>Serio38400_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio38400_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio38400_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[6a]"></a>Serio4800_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio4800_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio4800_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[65]"></a>Serio9600_OpeningHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi.o(i.Serio9600_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Serio9600_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[62]"></a>SigerrFunon_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.SigerrFunon_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SigerrFunon_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[64]"></a>SigerrOff_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.SigerrOff_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SigerrOff_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[63]"></a>SigerrPoson_OpeningHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmi.o(i.SigerrPoson_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SigerrPoson_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[35]"></a>SystemSafepos_DisplayHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi.o(i.SystemSafepos_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemSafepos_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[34]"></a>SystemSafepos_KeyboardHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hmi.o(i.SystemSafepos_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SystemSafepos_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[36]"></a>SystemSafepos_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.SystemSafepos_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemSafepos_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[37]"></a>SystemSetfact_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi.o(i.SystemSetfact_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemSetfact_OpeningHandler &rArr; display_char &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[ae]"></a>TuneDef_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TuneDef_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TuneDef_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[af]"></a>TuneFlow_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TuneFlow_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TuneFlow_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b2]"></a>TuneLevl_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TuneLevl_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TuneLevl_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[ad]"></a>TuneNot_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TuneNot_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TuneNot_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b1]"></a>TunePres_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TunePres_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TunePres_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[b0]"></a>TuneTemp_OpeningHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi.o(i.TuneTemp_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TuneTemp_OpeningHandler &rArr; menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[53]"></a>XcontrolDbnd_DisplayHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi.o(i.XcontrolDbnd_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XcontrolDbnd_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[52]"></a>XcontrolDbnd_KeyboardHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hmi.o(i.XcontrolDbnd_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = XcontrolDbnd_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[54]"></a>XcontrolDbnd_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XcontrolDbnd_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XcontrolDbnd_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[56]"></a>XcontrolPara_DisplayHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmi.o(i.XcontrolPara_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XcontrolPara_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[55]"></a>XcontrolPara_KeyboardHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hmi.o(i.XcontrolPara_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = XcontrolPara_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[57]"></a>XcontrolPara_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XcontrolPara_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XcontrolPara_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2f]"></a>XsetXlimit_DisplayHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmi.o(i.XsetXlimit_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XsetXlimit_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[2e]"></a>XsetXlimit_KeyboardHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hmi.o(i.XsetXlimit_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = XsetXlimit_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[30]"></a>XsetXlimit_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XsetXlimit_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XsetXlimit_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[32]"></a>XsetXtime_DisplayHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hmi.o(i.XsetXtime_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XsetXtime_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[31]"></a>XsetXtime_KeyboardHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, hmi.o(i.XsetXtime_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XsetXtime_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[33]"></a>XsetXtime_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XsetXtime_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XsetXtime_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[60]"></a>XtuneAir_DisplayHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hmi.o(i.XtuneAir_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XtuneAir_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5f]"></a>XtuneAir_KeyboardHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, hmi.o(i.XtuneAir_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XtuneAir_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[61]"></a>XtuneAir_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XtuneAir_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XtuneAir_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[58]"></a>XtuneAuto_OpeningHandler</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, hmi.o(i.XtuneAuto_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XtuneAuto_OpeningHandler &rArr; display_char &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWr_n
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmDutyCycle2
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLCD
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5d]"></a>XtunePwm_DisplayHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmi.o(i.XtunePwm_DisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XtunePwm_DisplayHandler &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5c]"></a>XtunePwm_KeyboardHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hmi.o(i.XtunePwm_KeyboardHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = XtunePwm_KeyboardHandler &rArr; menu_return
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_return
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[5e]"></a>XtunePwm_OpeningHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hmi.o(i.XtunePwm_OpeningHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XtunePwm_OpeningHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[fe]"></a>adj_display</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hmi.o(i.adj_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = adj_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtunePwm_KeyboardHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXlimit_KeyboardHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolPara_KeyboardHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolDbnd_KeyboardHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSafepos_KeyboardHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_KeyboardHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetSpltrng_KeyboardHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetCutoff_KeyboardHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_KeyboardHandler
</UL>

<P><STRONG><a name="[116]"></a>delay_1s</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hmi.o(i.delay_1s))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display_done
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAuto_OpeningHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyboardHandler
</UL>

<P><STRONG><a name="[f3]"></a>menu_display_done</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi.o(i.menu_display_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = menu_display_done &rArr; display_digital &rArr; digital &rArr; LCDWRITE_1622 &rArr; SENDCOMB &rArr; SendBit_HT1622
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_digital
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_char
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1s
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlSet5_OpeningHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlSet4_OpeningHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlSet10_OpeningHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlSet0_OpeningHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlPos_OpeningHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlP2_OpeningHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlP1_OpeningHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlCmd_OpeningHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActSngl_OpeningHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActDoub_OpeningHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneTemp_OpeningHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunePres_OpeningHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneNot_OpeningHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneLevl_OpeningHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFlow_OpeningHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneDef_OpeningHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigerrPoson_OpeningHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigerrOff_OpeningHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigerrFunon_OpeningHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio9600_OpeningHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio4800_OpeningHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio38400_OpeningHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio2400_OpeningHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio19200_OpeningHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serio1200_OpeningHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_OpeningHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakNot_OpeningHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakChar_OpeningHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input5_OpeningHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input4_OpeningHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input10_OpeningHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input0_OpeningHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DircmdRise_OpeningHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DircmdFall_OpeningHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiractRise_OpeningHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiractFall_OpeningHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact501_OpeningHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact331_OpeningHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact251_OpeningHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact150_OpeningHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact133_OpeningHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact125_OpeningHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charact11_OpeningHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserFact_OpeningHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Spos_OpeningHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Opn_OpeningHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Lim_OpeningHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2ErrT_OpeningHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2ErrS_OpeningHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Err2_OpeningHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Err1_OpeningHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Drv_OpeningHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Cls_OpeningHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Spos_OpeningHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Opn_OpeningHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Lim_OpeningHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1ErrT_OpeningHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1ErrS_OpeningHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Err2_OpeningHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Err1_OpeningHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Drv_OpeningHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin1Cls_OpeningHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlT_OpeningHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnlSp_OpeningHandler
</UL>

<P><STRONG><a name="[f8]"></a>menu_return</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hmi.o(i.menu_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = menu_return
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_KeyboardHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtunePwm_KeyboardHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XtuneAir_KeyboardHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXtime_KeyboardHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XsetXlimit_KeyboardHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolPara_KeyboardHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcontrolDbnd_KeyboardHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSafepos_KeyboardHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalT_KeyboardHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalS_KeyboardHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalP_KeyboardHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScalF_KeyboardHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlPara_KeyboardHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlKv_KeyboardHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlFilt_KeyboardHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcontrlDbnd_KeyboardHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_MAIN_MANUAL_KeyboardHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakMeas_KeyboardHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetSpltrng_KeyboardHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetCutoff_KeyboardHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeMenu_KeyboardHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeKey_KeyboardHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeGlob_KeyboardHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharactFree_KeyboardHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserPos_KeyboardHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaluserInp_KeyboardHandler
</UL>

<P><STRONG><a name="[f9]"></a>menu_update</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hmi.o(i.menu_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_update
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFun_KeyboardHandler
</UL>

<P><STRONG><a name="[103]"></a>DS18B20_ReadByte</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_5us
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature
</UL>

<P><STRONG><a name="[107]"></a>DS18B20_WriteByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_5us
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature
</UL>

<P><STRONG><a name="[106]"></a>Init_DS18B20</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ds18b20.o(i.Init_DS18B20))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_DS18B20
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_5us
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Temperature
</UL>

<P><STRONG><a name="[104]"></a>delay_5us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds18b20.o(i.delay_5us))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
</UL>

<P><STRONG><a name="[166]"></a>os_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.os_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[1d]"></a>Switch_task</STRONG> (ARM, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[f1]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f0]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[ef]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f2]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[194]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[189]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1a2]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[199]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ea]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[174]"></a>os_tmr_reload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[16c]"></a>rt_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[179]"></a>rt_notify</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[123]"></a>rt_post_taskswitch</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>
<HR></body></html>
